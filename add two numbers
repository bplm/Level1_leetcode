/* You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2)
    {int c=0;
 ListNode* head=NULL;
        ListNode* ptr=NULL;
        while(l1!=NULL || l2!=NULL||c )
        {int v=c;
            if(l1!=NULL){v+=l1->val;l1=l1->next;}
             if(l2!=NULL){v+=l2->val;l2=l2->next;}
            if(ptr==NULL){head=new ListNode(v%10); 
                          ptr=head;
                         }
         else
             {ptr->next=new ListNode(v%10);
                         ptr=ptr->next;
             }
         c=v/10;
        }
    ptr->next=NULL;
        return head;
    }
};
